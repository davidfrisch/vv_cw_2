{"is_extracted": false, "number_of_code_blocks": 0, "extra_information_num_words": null, "response": "package _018_4Sum;\n\nimport java.util.*;\n\npublic class Practice {\n    public List<List<Integer>> fourSum(int[] nums, int target) {\n        Arrays.sort(nums);\n        return kSum(nums, 4, 0, target);\n    }\n    \n    private List<List<Integer>> kSum(int[] nums, int k, int start, long target) {\n        List<List<Integer>> res = new ArrayList<>();\n        \n        // If we have reached the desired sum then no need to continue the recursion\n        if (k == 2) return twoSum(nums, start, (int)target);\n        \n        for (int i = start; i < nums.length - k + 1; ++i) {\n            // Skip duplicates\n            if (i > start && nums[i] == nums[i-1]) continue;\n            \n            // Use recursion to reduce the problem\u89c4\u6a21\n            for (List<Integer> subset : kSum(nums, k - 1, i + 1, target - nums[i])) {\n                res.add(new ArrayList<>(Arrays.asList(nums[i])));\n                res.get(res.size()-1).addAll(subset);\n            }\n        }\n        \n        return res;\n    }\n    \n    private List<List<Integer>> twoSum(int[] nums, int start, long target) {\n        List<List<Integer>> res = new ArrayList<>();\n        Set<Long> seen = new HashSet<>();\n        for (int i = start; i < nums.length; ++i) {\n            if (nums[i] > target || seen.contains(target - nums[i])) continue;\n            \n            res.add(Arrays.asList((int)target - nums[i], nums[i]));\n            seen.add(nums[i]);\n        }\n        \n        return res;\n    }\n}\n"}