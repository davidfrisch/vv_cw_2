It seems like the error is due to an incorrect import statement or missing class declaration for `PracticeTest` and `Practice` classes. Here are the corrected versions of your code snippets:

```java
// Corrected version of PracticeTest
import java.util.*;
public class PracticeTest {
    public int lengthOfLongestSubstringKDistinct(String s, int k) {
        if (k==0 || s.length() == 0) return 0;
        
        HashMap<Character, Integer> map = new HashMap<>();
        int maxLength = 1;
        int left = 0;
      
        for (int i=0; i<s.length(); ++i){  
            char c = s.charAt(i); 
            
            if(!map.containsKey(c)){  
                map.put(c,1);
                
                while (map.size() > k) {  
                    char leftChar = s.charAt(left);
                    if(map.get(leftChar) == null){
                        map.remove(leftChar);
                    } else {
                        map.put(leftChar, map.get(leftChar)-1);
                    }
                    
                    left++;
                 }
              } else {
                  map.put(c,map.get(c)+1);  
               }
            
            maxLength = Math.max(maxLength, i - left + 1); 
         }
      
        return maxLength;  
    }
}
```

```java
// Corrected version of Practice
import java.util.*;
public class Practice {
    public int lengthOfLongestSubstringKDistinct(String s, int k) {
        if (k==0 || s.length() == 0) return 0;
        
        HashMap<Character, Integer> map = new HashMap<>();
        int maxLength = 1;
        int left = 0;
      
        for (int i=0; i<s.length(); ++i){  
            char c = s.charAt(i); 
            
            if(!map.containsKey(c)){  
                map.put(c,1);
                
                while (map.size() > k) {  
                    char leftChar = s.charAt(left);
                    if(map.get(leftChar) == null){
                        map.remove(leftChar);
                    } else {
                        map.put(leftChar, map.get(leftChar)-1);
                    }
                    
                    left++;
                 }
              } else {
                  map.put(c,map.get(c)+1);  
               }
            
            maxLength = Math.max(maxLength, i - left + 1); 
         }
      
        return maxLength;  
    }
}
```
