{"is_extracted": false, "number_of_code_blocks": 0, "extra_information_num_words": null, "response": "package _004_MedianOfTwoSortedArrays;\n\npublic class Practice {\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n        int x = nums1.length;\n        int y = nums2.length;\n        \n        if (x > y) \n            return findMedianSortedArrays(nums2, nums1);\n            \n        int low = 0;\n        int high = x;\n        \n        while (low <= high) {\n            int partitionX = (low + high)/2;\n            int partitionY = (x + y + 1)/2 - partitionX;\n            \n            int maxLeftX = (partitionX == 0)? Integer.MIN_VALUE: nums1[partitionX-1];\n            int minRightX = (partitionX == x)? Integer.MAX_VALUE: nums1[partitionX];\n            \n            int maxLeftY = (partitionY == 0)? Integer.MIN_VALUE: nums2[partitionY-1];\n            int minRightY = (partitionY == y)? Integer___MAX_VALUE: nums2[partitionY];\n            \n            if(maxLeftX <= minRightY && maxLeftY <= minRightX){\n                if((x + y) % 2 == 0)\n                    return ((double)Math.max(maxLeftX, maxLeftY) + Math.min(minRightX, minRightY))/2;\n                else\n                    return (double)Math.max(maxLeftX, maxLeftY);\n            }else if(maxLeftX > minRightY){\n                high = partitionX - 1;\n            }else{\n                low = partitionX + 1;\n            }\n        }\n        \n        throw new IllegalArgumentException();\n    }\n}\n"}