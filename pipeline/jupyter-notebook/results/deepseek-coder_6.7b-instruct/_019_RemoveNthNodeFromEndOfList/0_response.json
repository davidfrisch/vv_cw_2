{"is_extracted": false, "number_of_code_blocks": 0, "extra_information_num_words": null, "response": "/**\n *************************************************************************\n * Description: \n * \n * Given a linked list, remove the nth node from the end of list and return \n * its head. \n * \n * For example, \n * Given linked list: 1->2->3->4->5, and n =  2. After removing the second \n * node from the end, the linked list becomes 1->2->3->5.\n * \n * Note: \n * Given n will always be valid. Try to do this in one pass.\n * \n *************************************************************************\n * @tag : Linked List; Two Pointers\n * {@link https://leetcode.com/problems/remove-nth-node-from-end-of }\n */\npackage _019_RemoveNthNodeFromEndOfList;\n\nimport com.leetcode.ListNode;\n\n/** see test {@link _019_RemoveNthNodeFromEndOfList.PracticeTest } */\npublic class Practice {\n\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        ListNode dummy = new ListNode(0); // Dummy node \n        dummy.next = head;\n        \n        ListNode first = dummy;\n        ListNode second = dummy;\n\n        for (int i = 1; i <= n + 1; i++) { // Move the first pointer so that the gap between first and second is n\n            first = first.next;\n        }\n        \n        while(first != null){ // Move both pointers until we reach end of list \n            first = first.next;\n            second = second.next;\n        }\n        \n        second.next = second.next.next; // Remove the nth node from end by skipping over it\n        \n        return dummy.next;\n    }\n}\n"}