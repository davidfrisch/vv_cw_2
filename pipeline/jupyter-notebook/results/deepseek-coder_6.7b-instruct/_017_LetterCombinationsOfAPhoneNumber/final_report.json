{
    "total_retries": 1,
    "model": "deepseek-coder:6.7b-instruct",
    "leetcode_question": "_017_LetterCombinationsOfAPhoneNumber",
    "passed": true,
    "tries": {
        "0": {
            "extra_prompt": "Replace  // TODO Auto-generated method stub with your solution code. Only answer with the complete file. Don't explain !",
            "is_extracted": true,
            "number_of_code_blocks": 1,
            "extra_information_num_words": 1,
            "response": "```\npackage _017_LetterCombinationsOfAPhoneNumber;\n\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Practice {\n    public List<String> letterCombinations(String digits) {\n        String[] mapping = new String[]{\"0\", \"1\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"};\n        \n        List<String> result = new ArrayList<>();\n        if (digits == null || digits.length() == 0) {\n            return result;\n        }\n        \n        helper(result, digits, \"\", 0, mapping);\n        return result;\n    }\n    \n    private void helper(List<String> result, String digits, String current, int index, String[] mapping) {\n        if (index == digits.length()) {\n            result.add(current);\n            return;\n       }\n        \n        String letters = mapping[digits.charAt(index) - '0'];\n        for (int i = 0; i < letters.length(); i++) {\n            helper(result, digits, current + letters.charAt(i), index + 1, mapping);\n        }\n    }\n}\n```\n",
            "number_of_issues": 0,
            "issues": [],
            "num_tests": "4",
            "num_successes": 4,
            "num_failures": "0",
            "num_errors": "0",
            "timestamp": "2024-04-08T14:14:27",
            "test_cases": [
                {
                    "name": "Test0",
                    "time": "0.025",
                    "success": true,
                    "failure": null,
                    "message": null,
                    "code": "@Test\n    public void Test0() {\n        String digits = \"23\";\n        List<String> actuals = solution.letterCombinations(digits);\n        List<String> expecteds = Arrays.asList(\"ad\", \"ae\", \"af\", \"bd\", \"be\",\n                \"bf\", \"cd\", \"ce\", \"cf\");\n        assertEqualsIgnoreOrder(expecteds, actuals);\n    }"
                },
                {
                    "name": "Test1",
                    "time": "0.001",
                    "success": true,
                    "failure": null,
                    "message": null,
                    "code": "@Test\n    public void Test1() {\n        String digits = \"\";\n        List<String> actuals = solution.letterCombinations(digits);\n        List<String> expecteds = new ArrayList<>();\n        assertEqualsIgnoreOrder(expecteds, actuals);\n    }"
                },
                {
                    "name": "Test2",
                    "time": "0.001",
                    "success": true,
                    "failure": null,
                    "message": null,
                    "code": "@Test\n    public void Test2() {\n        String digits = \"9\";\n        List<String> actuals = solution.letterCombinations(digits);\n        List<String> expecteds = new ArrayList<>(Arrays.asList(\"w\", \"x\", \"y\", \"z\"));\n        assertEqualsIgnoreOrder(expecteds, actuals);\n    }"
                },
                {
                    "name": "Test3",
                    "time": "0.007",
                    "success": true,
                    "failure": null,
                    "message": null,
                    "code": "@Test\n    public void Test3() {\n        String digits = \"234\";\n        List<String> actuals = solution.letterCombinations(digits);\n        List<String> expecteds = Arrays.asList(\"adg\", \"adh\", \"adi\", \"aeg\",\n                \"aeh\", \"aei\", \"afg\", \"afh\", \"afi\", \"bdg\", \"bdh\", \"bdi\", \"beg\",\n                \"beh\", \"bei\", \"bfg\", \"bfh\", \"bfi\", \"cdg\", \"cdh\", \"cdi\", \"ceg\",\n                \"ceh\", \"cei\", \"cfg\", \"cfh\", \"cfi\");\n        assertEqualsIgnoreOrder(expecteds, actuals);\n    }"
                }
            ]
        }
    }
}