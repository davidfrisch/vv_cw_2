{"is_extracted": true, "number_of_code_blocks": 1, "extra_information_num_words": 1, "response": "```\npackage _020_ValidParentheses;\n\nimport java.util.Stack;\n\npublic class Practice {\n    public boolean isValid(String s) {\n        Stack<Character> stack = new Stack<>();\n        \n        for (char c : s.toCharArray()) {\n            if (c == '(' || c == '{' || c == '[') {\n                // Push the corresponding closing bracket onto the stack.\n                switch(c) {\n                    case '(':\n                        stack.push(')');\n                        break;\n                    case '{':\n                        stack.push('}');\n                        break;\n                    case '[':\n                        stack.push(']');\n                        break;\n                }\n            } else if (stack.isEmpty() || stack.pop() != c) { \n                // If the current character is not an opening bracket or its closing counterpart doesn't match with what we have in our stack, return false.\n                return false;\n           }\n        }\n        \n        // After scanning all characters, if there are still elements left on the stack, that means the string is invalid (ex: \"(()\"))\n        return stack.isEmpty();\n    }\n}\n```\n"}