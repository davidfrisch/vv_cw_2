{"is_extracted": false, "number_of_code_blocks": 0, "extra_information_num_words": null, "response": "\nHere is the complete solution code for the 3Sum problem:\n\npackage _015_3Sum;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Practice {\n\n    public List<List<Integer>> threeSum(int[] nums) {\n        List<List<Integer>> res = new ArrayList<>();\n        if (nums == null || nums.length <= 2) {\n            return res;\n        }\n\n        int left = 0;\n        int right = nums.length - 1;\n        int mid = (left + right) / 2;\n\n        while (left < right) {\n            if (nums[mid] == 0) {\n                List<Integer> triplet = new ArrayList<>();\n                triplet.add(nums[left]);\n                triplet.add(nums[mid]);\n                triplet.add(nums[right]);\n                res.add(triplet);\n\n                while (left < right && nums[left] == nums[right]) {\n                    left++;\n                    right--;\n                }\n\n                if (left < right) {\n                    swap(nums, left, mid);\n                    swap(nums, right, mid);\n                }\n            } else {\n                if (nums[mid] > 0) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n\n        return res;\n    }\n\n    private void swap(int[] nums, int left, int right) {\n        int temp = nums[left];\n        nums[left] = nums[right];\n        nums[right] = temp;\n    }\n}"}