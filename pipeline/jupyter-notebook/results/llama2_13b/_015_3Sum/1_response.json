{"is_extracted": true, "number_of_code_blocks": 1, "extra_information_num_words": 92, "response": "Here is the Java code for the 3Sum problem:\n\n```\nimport java.util.List;\n\npublic class Practice {\n    public List<List<Integer>> threeSum(int[] nums) {\n        // Use two pointers approach\n        int left = 0;\n        int right = nums.length - 1;\n        List<List<Integer>> res = new ArrayList<>();\n\n        while (left < right) {\n            int sum = nums[left] + nums[right] + nums[left + 1];\n            if (sum == 0) {\n                List<Integer> triplet = new ArrayList<>();\n                triplet.add(nums[left]);\n                triplet.add(nums[right]);\n                triplet.add(nums[left + 1]);\n                res.add(triplet);\n                while (left < right && nums[left] <= nums[right]) {\n                    left++;\n                }\n                right -= left;\n            }\n            left++;\n        }\n        return res;\n    }\n}\n```\nThis solution uses the two pointers approach to find all unique triplets in the array that sum to 0. The left pointer starts at 0 and moves towards the end of the array, while the right pointer starts at the end of the array and moves towards the beginning. As we move both pointers, we check if the sum of the three elements is equal to 0, and if it is, we add the triplet to the result list and move both pointers accordingly."}