The following code has the following error: 
clean:
   [delete] Deleting directory /app/leetcode-master/bin
   [delete] Deleting directory /app/leetcode-master/report

init:
    [mkdir] Created dir: /app/leetcode-master/bin
    [mkdir] Created dir: /app/leetcode-master/report

compile.specific:
    Compiling 13 source files to /app/leetcode-master/bin
    /app/leetcode-master/src/_004_MedianOfTwoSortedArrays/Practice.java:2: error: class, interface, or enum expected
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
           ^
    /app/leetcode-master/src/_004_MedianOfTwoSortedArrays/Practice.java:4: error: class, interface, or enum expected
        int n = nums2.length;
        ^
    /app/leetcode-master/src/_004_MedianOfTwoSortedArrays/Practice.java:5: error: class, interface, or enum expected
        if (m == 0 || n == 0) {
        ^
    /app/leetcode-master/src/_004_MedianOfTwoSortedArrays/Practice.java:7: error: class, interface, or enum expected
        }
        ^
    /app/leetcode-master/src/_004_MedianOfTwoSortedArrays/Practice.java:11: error: class, interface, or enum expected
        int right = findMedianSortedArrays(nums2, 0, n - 1);
        ^
    /app/leetcode-master/src/_004_MedianOfTwoSortedArrays/Practice.java:13: error: class, interface, or enum expected
        if (left == right) {
        ^
    /app/leetcode-master/src/_004_MedianOfTwoSortedArrays/Practice.java:15: error: class, interface, or enum expected
        } else {
        ^
    /app/leetcode-master/src/_004_MedianOfTwoSortedArrays/Practice.java:17: error: class, interface, or enum expected
        }
        ^
    8 errors
. Retry with a fix of the complete file. Don't explain! Only give the java code

public double findMedianSortedArrays(int[] nums1, int[] nums2) {
    int m = nums1.length;
    int n = nums2.length;
    if (m == 0 || n == 0) {
        return 0;
    }

    // divide and conquer algorithm
    int left = findMedianSortedArrays(nums1, 0, m - 1);
    int right = findMedianSortedArrays(nums2, 0, n - 1);

    if (left == right) {
        return left; // both arrays have the same median
    } else {
        return (left + right) / 2; // different medians, use average
    }
}
