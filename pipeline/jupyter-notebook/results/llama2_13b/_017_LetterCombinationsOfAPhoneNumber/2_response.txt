 Sure! Here is the Java code for the problem "Letter Combinations of a Phone Number":

import java.util.List;

public class Practice {

    public List<String> letterCombinations(String digits) {
        // Initialize an empty list to store the results
        List<String> combinations = new ArrayList<>();

        // Base case: if the digit string is empty, return an empty list
        if (digits.length() == 0) {
            return combinations;
        }

        // Recursive case: for each remaining digit, generate all possible letter combinations
        for (int i = 0; i < digits.length(); i++) {
            int currentDigit = Integer.parseInt(digits.charAt(i) + "");

            // For each possible letter combination of the current digit
            for (char letter : getLettersForDigit(currentDigit)) {
                String combination = digits.substring(0, i) + letter + digits.substring(i + 1);
                combinations.add(combination);
            }
        }

        return combinations;
    }

    // Given a digit, return all possible letters that can be used to form combinations
    private char[] getLettersForDigit(int digit) {
        switch (digit) {
            case 2: return new char[] {'a', 'b'};
            case 3: return new char[] {'c', 'd'};
            case 4: return new char[] {'e', 'f'};
            case 5: return new char[] {'g', 'h'};
            case 6: return new char[] {'i', 'j'};
            case 7: return new char[] {'k', 'l'};
            case 8: return new char[] {'m', 'n'};
            case 9: return new char[] {'o', 'p'};
        }
        return new char[0];
    }
}