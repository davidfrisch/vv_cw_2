 Sure! Here is the Java code for the `fourSum` method:

```
public List<List<Integer>> fourSum(int[] nums, int target) {
    List<List<Integer>> res = new ArrayList<>();
    if (nums.length < 4) {
        return res;
    }
    int left = 0;
    int right = nums.length - 1;
    while (left < right) {
        int sum = nums[left] + nums[right];
        if (sum == target) {
            List<Integer> quad = new ArrayList<>();
            quad.add(nums[left]);
            quad.add(nums[right]);
            res.add(quad);
            while (left < right && nums[left] + nums[right] <= target) {
                left++;
                right--;
                sum = nums[left] + nums[right];
            }
            if (sum == target) {
                quad.add(nums[left]);
                quad.add(nums[right]);
                res.add(quad);
            }
        }
        left++;
        right--;
    }
    return res;
}
```
This solution uses two pointers, one starting from the left end of the array and another starting from the right end of the array. The two pointers move towards each other, and whenever they meet a pair with the target sum, they add it to the result list. They keep moving towards each other until they reach the end of the array or find all possible pairs.

Note that this solution assumes that the input array is not empty. If the array is empty, the method should return an empty list.