The following code has the following error: Message: junit.framework.AssertionFailedError
@Test
    public void Test1() {
        int n = 2;
        int[] nums = {1, 2, 3, 4, 5};
        ListNode head = ListNode.constructLinkedList(nums);
        ListNode actual = solution.removeNthFromEnd(head, n);
        // 1->2->3->5
        int[] exps = {1, 2, 3, 5};
        ListNode expect = ListNode.constructLinkedList(exps);
        assertTrue(ListNode.isSameList(actual, expect));
    }

Message: junit.framework.AssertionFailedError
@Test
    public void Test2() {
        int n = 5;
        int[] nums = {1, 2, 3, 4, 5};
        ListNode head = ListNode.constructLinkedList(nums);
        ListNode actual = solution.removeNthFromEnd(head, n);
        // 2->3->4->5
        int[] exps = {2, 3, 4, 5};
        ListNode expect = ListNode.constructLinkedList(exps);
        assertTrue(ListNode.isSameList(actual, expect));
    }

Message: junit.framework.AssertionFailedError
@Test
    public void Test3() {
        int n = 1;
        int[] nums = {1, 2, 3, 4, 5};
        ListNode head = ListNode.constructLinkedList(nums);
        ListNode actual = solution.removeNthFromEnd(head, n);
        int[] exps = {1, 2, 3, 4};
        ListNode expect = ListNode.constructLinkedList(exps);
        assertTrue(ListNode.isSameList(actual, expect));
    }

Message: junit.framework.AssertionFailedError
@Test
    public void Test5() {
        int n = 1;
        int[] nums = {1};
        ListNode head = ListNode.constructLinkedList(nums);
        ListNode actual = solution.removeNthFromEnd(head, n);
        int[] exps = {};
        ListNode expect = ListNode.constructLinkedList(exps);
        assertTrue(ListNode.isSameList(actual, expect));
    }


. Retry with a fix of the complete file. Don't explain! Only give the java code

package _019_RemoveNthNodeFromEndOfList;

import com.leetcode.ListNode;

public class Practice {

    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode slow = head;
        ListNode fast = head;

        for (int i = 0; i < n; i++) {
            fast = fast.next;
            if (fast == null) {
                return head;
            }
        }

        while (fast != null) {
            slow = slow.next;
            fast = fast.next;
        }

        ListNode prev = null;
        while (slow != null) {
            ListNode temp = slow.next;
            slow.next = prev;
            prev = slow;
            slow = temp;
        }

        if (prev != null) {
            prev.next = head;
        }

        return prev;
    }

}
