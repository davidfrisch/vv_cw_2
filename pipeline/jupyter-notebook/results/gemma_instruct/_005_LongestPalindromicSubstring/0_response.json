{"is_extracted": true, "number_of_code_blocks": 1, "extra_information_num_words": 1, "response": "```\npackage _005_LongestPalindromicSubstring;\n\npublic class Practice {\n\n    public String longestPalindrome(String s) {\n        int n = s.length();\n        if (n <= 1) {\n            return s;\n        }\n        String longest = \"\";\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                String current = s.substring(i, j + 1);\n                if (isPalindrome(current) && current.length() > longest.length()) {\n                    longest = current;\n                }\n            }\n        }\n        return longest;\n    }\n\n    private boolean isPalindrome(String s) {\n        int left = 0;\n        int right = s.length() - 1;\n        while (left <= right) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}\n```"}