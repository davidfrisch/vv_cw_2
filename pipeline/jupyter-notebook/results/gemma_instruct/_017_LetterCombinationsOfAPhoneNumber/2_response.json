{"is_extracted": true, "number_of_code_blocks": 1, "extra_information_num_words": 1, "response": "```\npackage _017_LetterCombinationsOfAPhoneNumber;\n\nimport java.util.*;\n\npublic class Practice {\n\n    public List<String> letterCombinations(String digits) {\n        Map<String, String> phoneMap = new HashMap<>() {{\n            put(\"2\", \"ad\");\n            put(\"3\", \"ae af\");\n            put(\"4\", \"bd be\");\n            put(\"5\", \"cf\");\n            put(\"6\", \"dg\");\n            put(\"7\", \"eh\");\n            put(\"8\", \"ij\");\n            put(\"9\", \"km\");\n            put(\"0\", \"\");\n        }};\n\n        List<String> result = new ArrayList<>();\n        backtrack(digits, 0, new ArrayList<>(), result, phoneMap);\n        return result;\n    }\n\n    private void backtrack(String digits, int index, List<String> current, List<String> result, Map<String, String> phoneMap) {\n        if (index == digits.length()) {\n            result.add(String.join(\"\", current));\n            return;\n        }\n\n        for (String letter : phoneMap.getOrDefault(digits.charAt(index) + \"\", \"\")) {\n            current.add(letter);\n            backtrack(digits, index + 1, current, result, phoneMap);\n            current.remove(current.size() - 1);\n        }\n    }\n}\n```"}