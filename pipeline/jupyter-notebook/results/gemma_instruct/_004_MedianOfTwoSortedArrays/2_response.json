{"is_extracted": true, "number_of_code_blocks": 1, "extra_information_num_words": 1, "response": "```\npackage _004_MedianOfTwoSortedArrays;\n\n/** see test {@link _004_MedianOfTwoSortedArrays.PracticeTest } */\npublic class Practice {\n\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n        int m = nums1.length;\n        int n = nums2.length;\n        int total = m + n;\n\n        if (total % 2 == 1) {\n            return findKth(nums1, nums2, total / 2, 0, m - 1, m, n);\n        } else {\n            double leftMedian = findKth(nums1, nums2, total / 2 - 1, 0, m - 1, m, n);\n            double rightMedian = findKth(nums1, nums2, total / 2, 0, m - 1, m, n);\n            return (leftMedian + rightMedian) / 2;\n        }\n    }\n\n    private double findKth(int[] nums1, int[] nums2, int k, int start1, int end1, int start2, int end2) {\n        while (start1 <= end1 && start2 <= end2) {\n            int i = start1 + (end1 - start1) / 2;\n            int j = start2 + (end2 - start2) / 2;\n\n            if (nums1[i] <= nums2[j]) {\n                end1 = i - 1;\n            } else {\n                end2 = j - 1;\n            }\n        }\n\n        if (start1 <= end1) {\n            return nums1[start1 + k];\n        } else {\n            return nums2[start2 + k];\n        }\n    }\n\n}\n```"}