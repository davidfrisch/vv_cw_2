The following code has the following error: 
clean:
   [delete] Deleting directory /app/leetcode-master/bin
   [delete] Deleting directory /app/leetcode-master/report

init:
    [mkdir] Created dir: /app/leetcode-master/bin
    [mkdir] Created dir: /app/leetcode-master/report

compile.specific:
    Compiling 13 source files to /app/leetcode-master/bin
    /app/leetcode-master/src/_015_3Sum/Practice.java:27: error: no suitable method found for equals(Object[],int[])
                        if (prevIndex != -1 && Arrays.equals(result.get(prevIndex).toArray(), new int[] {nums[i], nums[left], nums[right]})) {
                                                     ^
        method Arrays.equals(long[],long[]) is not applicable
          (argument mismatch; Object[] cannot be converted to long[])
        method Arrays.equals(int[],int[]) is not applicable
          (argument mismatch; Object[] cannot be converted to int[])
        method Arrays.equals(short[],short[]) is not applicable
          (argument mismatch; Object[] cannot be converted to short[])
        method Arrays.equals(char[],char[]) is not applicable
          (argument mismatch; Object[] cannot be converted to char[])
        method Arrays.equals(byte[],byte[]) is not applicable
          (argument mismatch; Object[] cannot be converted to byte[])
        method Arrays.equals(boolean[],boolean[]) is not applicable
          (argument mismatch; Object[] cannot be converted to boolean[])
        method Arrays.equals(double[],double[]) is not applicable
          (argument mismatch; Object[] cannot be converted to double[])
        method Arrays.equals(float[],float[]) is not applicable
          (argument mismatch; Object[] cannot be converted to float[])
        method Arrays.equals(Object[],Object[]) is not applicable
          (argument mismatch; int[] cannot be converted to Object[])
        method Arrays.<T#1>equals(T#1[],T#1[],Comparator<? super T#1>) is not applicable
          (cannot infer type-variable(s) T#1
            (actual and formal argument lists differ in length))
        method Arrays.<T#2>equals(T#2[],int,int,T#2[],int,int,Comparator<? super T#2>) is not applicable
          (cannot infer type-variable(s) T#2
            (actual and formal argument lists differ in length))
      where T#1,T#2 are type-variables:
        T#1 extends Object declared in method <T#1>equals(T#1[],T#1[],Comparator<? super T#1>)
        T#2 extends Object declared in method <T#2>equals(T#2[],int,int,T#2[],int,int,Comparator<? super T#2>)
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
    1 error
. Retry with a fix of the complete file. Don't explain! Only give the java code

package _015_3Sum;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/** see test {@link _015_3Sum.PracticeTest} */
public class Practice {

    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums); // Sort the array in ascending order

        List<List<Integer>> result = new ArrayList<>(); // Initialize an empty list to store the results

        for (int i = 0; i < nums.length - 2; i++) { // Iterate through the array, starting from the first element
            int targetSum = 0; // Set the target sum to zero
            int left = i + 1; // Initialize two pointers, one to the right of the current element
            int right = nums.length - 1;

            while (left < right) { // While the left pointer is less than the right pointer
                if (nums[i] + nums[left] + nums[right] == targetSum) { // Check if the current triplet satisfies the condition
                    result.add(Arrays.asList(nums[i], nums[left], nums[right])); // If yes, add it to the result list
                    
                    // To avoid adding duplicate triplets, we can break out of the loop if the current triplets are equal to a previous one in reverse order
                    int prevIndex = result.lastIndexOf(Arrays.asList(nums[right], nums[left], nums[i]));
                    if (prevIndex != -1 && Arrays.equals(result.get(prevIndex).toArray(), new int[] {nums[i], nums[left], nums[right]})) {
                        break;
                    }

                    left++; // Move the left pointer to the right of the current element
                    right--; // Move the right pointer to the left of the current element
                } else if (nums[i] + nums[left] + nums[right] < targetSum) { // If the sum is less than the target, move the left pointer to the right
                    left++;
                } else { // If the sum is greater than the target, move the right pointer to the left
                    right--;
                }
            }
        }

        return result; // Return the list of unique triplets that satisfy the condition
    }
}
