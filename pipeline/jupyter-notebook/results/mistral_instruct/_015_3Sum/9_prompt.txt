The following code has the following error: 
clean:
   [delete] Deleting directory /app/leetcode-master/bin
   [delete] Deleting directory /app/leetcode-master/report

init:
    [mkdir] Created dir: /app/leetcode-master/bin
    [mkdir] Created dir: /app/leetcode-master/report

compile.specific:
    Compiling 13 source files to /app/leetcode-master/bin
    /app/leetcode-master/src/_015_3Sum/Practice.java:56: error: incompatible types: int[] cannot be converted to Object[]
                if (Arrays.deepEquals(existingSubArray.stream().mapToInt(i -> i).toArray(), subArray.stream().mapToInt(i -> i).toArray())) {
                                                                                        ^
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
    1 error
. Retry with a fix of the complete file. Don't explain! Only give the java code

package _015_3Sum;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Practice {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums); // Sort the array in ascending order

        List<List<Integer>> result = new ArrayList<>(); // Initialize an empty list to store the results

        for (int i = 0; i < nums.length - 2; i++) { // Iterate through the array, starting from the first element
            int targetSum = 0;
            int left = i + 1;
            int right = nums.length - 1;

            while (left < right) {
                if (nums[i] + nums[left] + nums[right] == targetSum) {
                    result.add(Arrays.asList(nums[i], nums[left], nums[right]));

                    boolean isDuplicate = containsDuplicateSubArray(result, Arrays.asList(nums[i], nums[left], nums[right]));
                    if (isDuplicate) {
                        break;
                    }

                    left++;
                } else if (nums[i] + nums[left] + nums[right] < targetSum) {
                    left++;
                } else {
                    right--;
                }
            }
        }

        return result;
    }

    // Add this method to compare two int arrays for equality
    public static boolean arrayEquals(int[] a, int[] b) {
        if (a.length != b.length) {
            return false;
        }

        for (int i = 0; i < a.length; ++i) {
            if (a[i] != b[i]) {
                return false;
            }
        }

        return true;
    }

    private boolean containsDuplicateSubArray(List<List<Integer>> list, List<Integer> subArray) {
        for (List<Integer> existingSubArray : list) {
            if (Arrays.deepEquals(existingSubArray.stream().mapToInt(i -> i).toArray(), subArray.stream().mapToInt(i -> i).toArray())) {
                return true;
            }
        }

        return false;
    }
}
