{"is_extracted": true, "number_of_code_blocks": 1, "extra_information_num_words": 81, "response": " Here is a possible solution for the given problem using Java and the Two Pointers technique:\n\n```\npackage _015_3Sum;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\n/** see test {@link _015_3Sum.PracticeTest} */\npublic class Practice {\n\n    public List<List<Integer>> threeSum(int[] nums) {\n        Arrays.sort(nums); // Sort the array in ascending order\n\n        List<List<Integer>> result = new ArrayList<>(); // Initialize an empty list to store the results\n\n        for (int i = 0; i < nums.length - 2; i++) { // Iterate through the array, starting from the first element\n            int targetSum = 0; // Set the target sum to zero\n            int left = i + 1; // Initialize two pointers, one to the right of the current element\n            int right = nums.length - 1;\n\n            while (left < right) { // While the left pointer is less than the right pointer\n                if (nums[i] + nums[left] + nums[right] == targetSum) { // Check if the current triplet satisfies the condition\n                    result.add(Arrays.asList(nums[i], nums[left], nums[right])); // If yes, add it to the result list\n                    \n                    // To avoid adding duplicate triplets, we can break out of the loop if the current triplets are equal to a previous one in reverse order\n                    int prevIndex = result.lastIndexOf(Arrays.asList(nums[right], nums[left], nums[i]));\n                    if (prevIndex != -1 && Arrays.equals(result.get(prevIndex).toArray(), new int[] {nums[i], nums[left], nums[right]})) {\n                        break;\n                    }\n\n                    left++; // Move the left pointer to the right of the current element\n                    right--; // Move the right pointer to the left of the current element\n                } else if (nums[i] + nums[left] + nums[right] < targetSum) { // If the sum is less than the target, move the left pointer to the right\n                    left++;\n                } else { // If the sum is greater than the target, move the right pointer to the left\n                    right--;\n                }\n            }\n        }\n\n        return result; // Return the list of unique triplets that satisfy the condition\n    }\n}\n```\n\nThis solution uses the Two Pointers technique to find all unique triplets in an array that add up to zero. The time complexity is O(n^2), as we iterate through the array once and for each element, we use two pointers to traverse the remaining elements, which results in n-1 inner loops. The space complexity is O(n) due to the additional list used to store the results."}