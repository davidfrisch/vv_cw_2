The following code has the following error: Message: expected:<[ad, ae, af, bd, be, bf, cd, ce, cf]> but was:<[233, 233, 233, 233, 333, 333, 333, 333]>
@Test
    public void Test0() {
        String digits = "23";
        List<String> actuals = solution.letterCombinations(digits);
        List<String> expecteds = Arrays.asList("ad", "ae", "af", "bd", "be",
                "bf", "cd", "ce", "cf");
        assertEqualsIgnoreOrder(expecteds, actuals);
    }


Message: expected:<[w, x, y, z]> but was:<[23, 23, 33, 33]>
@Test
    public void Test2() {
        String digits = "9";
        List<String> actuals = solution.letterCombinations(digits);
        List<String> expecteds = new ArrayList<>(Arrays.asList("w", "x", "y", "z"));
        assertEqualsIgnoreOrder(expecteds, actuals);
    }

Message: expected:<[adg, adh, adi, aeg, aeh, aei, afg, afh, afi, bdg, bdh, bdi, beg, beh, bei, bfg, bfh, bfi, cdg, cdh, cdi, ceg, ceh, cei, cfg, cfh, cfi]> but was:<[3332, 3332, 3332, 3332, 3332, 3332, 3332, 3332, 3333, 3333, 3333, 3333, 3333, 3333, 3333, 3333]>
@Test
    public void Test3() {
        String digits = "234";
        List<String> actuals = solution.letterCombinations(digits);
        List<String> expecteds = Arrays.asList("adg", "adh", "adi", "aeg",
                "aeh", "aei", "afg", "afh", "afi", "bdg", "bdh", "bdi", "beg",
                "beh", "bei", "bfg", "bfh", "bfi", "cdg", "cdh", "cdi", "ceg",
                "ceh", "cei", "cfg", "cfh", "cfi");
        assertEqualsIgnoreOrder(expecteds, actuals);
    }


. Retry with a fix of the complete file. Don't explain! Only give the java code

package _017_LetterCombinationsOfAPhoneNumber;

import java.util.ArrayList;
import java.util.List;

/** see test {@link _017_LetterCombinationsOfAPhoneNumber.PracticeTest } */
public class Practice {

    public List<String> letterCombinations(String digits) {
        if (digits == null || digits.length() == 0) {
            return new ArrayList<>();
        }

        final String MAP = "2223333444555666777888999";
        int numDigits = digits.length();
        List<String> result = new ArrayList<>();
        char[] digitsChars = digits.toCharArray();

        backtracking(MAP, "", result, new StringBuilder(), 0, numDigits);

        return result;
    }

    private void backtracking(String map, String combination, List<String> result, StringBuilder currentCombination, int index, int totalDigits) {
        if (index > totalDigits) {
            // If all digits have been processed, add the current combination to the result
            result.add(currentCombination.toString());
            return;
        }

        String digitsForLetter = map.substring(digitsForLetterIndex(index, totalDigits), digitsForLetterIndex(index, totalDigits) + 2);
        for (char c : digitsForLetter.toCharArray()) {
            currentCombination.append(c);
            backtracking(map, combination + c, result, currentCombination, index + 1, totalDigits);
            currentCombination.deleteCharAt(currentCombination.length() - 1);
        }
    }

    private int digitsForLetterIndex(int digitIndex, int totalDigits) {
        return (totalDigits - digitIndex) / 3 * 3 + (digitIndex % 3) + 2;
    }
}
