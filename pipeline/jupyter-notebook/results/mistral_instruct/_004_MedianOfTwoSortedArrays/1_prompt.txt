The following code has the following error: 
clean:
   [delete] Deleting directory /app/leetcode-master/bin
   [delete] Deleting directory /app/leetcode-master/report

init:
    [mkdir] Created dir: /app/leetcode-master/bin
    [mkdir] Created dir: /app/leetcode-master/report

compile.specific:
    Compiling 13 source files to /app/leetcode-master/bin
    /app/leetcode-master/src/_004_MedianOfTwoSortedArrays/Practice.java:57: error: cannot find symbol
                return rangeClosed(start1, end1).mapToInt(i -> nums1[i]).sum() > rangeClosed(start2, end2).mapToInt(j -> nums2[j]).sum() ? nums1[start1] : nums2[start2];
                                                ^
      symbol:   method mapToInt((i)->nums1[i])
      location: interface IntStream
    /app/leetcode-master/src/_004_MedianOfTwoSortedArrays/Practice.java:57: error: cannot find symbol
                return rangeClosed(start1, end1).mapToInt(i -> nums1[i]).sum() > rangeClosed(start2, end2).mapToInt(j -> nums2[j]).sum() ? nums1[start1] : nums2[start2];
                                                                                                          ^
      symbol:   method mapToInt((j)->nums2[j])
      location: interface IntStream
    2 errors
. Retry with a fix of the complete file. Don't explain! Only give the java code

package _004_MedianOfTwoSortedArrays;

import static java.util.stream.IntStream.rangeClosed;

/** see test {@link _004_MedianOfTwoSortedArrays.PracticeTest } */
public class Practice {

    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int totalSize = nums1.length + nums2.length;
        if (totalSize % 2 == 0) { // even number of elements
            return findMedianOfTwoSortedArraysEvenLength(nums1, nums2);
        } else { // odd number of elements
            return findMedianOfTwoSortedArraysOddLength(nums1, nums2);
        }
    }

    private double findMedianOfTwoSortedArraysEvenLength(int[] nums1, int[] nums2) {
        int m = nums1.length;
        int n = nums2.length;
        int start = (m > n) ? 0 : 1; // determine which array to use as low index in mergeSort
        int mid1 = (m + n + 1) / 2; // middle index of nums1
        int mid2 = mid1 - start; // middle index of nums2
        
        return findKthElement(nums1, 0, m, nums2, 0, n, mid1) + findKthElement(nums1, 0, m, nums2, 0, n, mid2);
    }

    private double findMedianOfTwoSortedArraysOddLength(int[] nums1, int[] nums2) {
        int m = nums1.length;
        int n = nums2.length;
        int start = (m > n) ? 0 : 1; // determine which array to use as low index in mergeSort
        
        return findKthElement(nums1, 0, m, nums2, 0, n, (m + n) / 2);
    }

    private int findKthElement(int[] nums1, int start1, int end1, int[] nums2, int start2, int end2, int k) {
        if (end1 + end2 < k) { // mergeSort
            return mergeSort(nums1, start1, end1, nums2, start2, end2);
        } else if (start1 <= end1 && start2 <= end2) { // binary search in merged array
            int mid = (start1 + end1 + start2 + end2) / 2;
            int leftSize = mid - start1;
            
            if (nums1[mid] == nums2[mid]) { // median is at this position
                return nums1[mid];
            } else if (leftSize < k) { // search in the right part of the merged array
                return findKthElement(rangeToIntArray(nums1, mid + 1, end1), mid + 1, end1, nums2, start2, end2, k - (mid - start1 + 1));
            } else { // search in the left part of the merged array
                return findKthElement(nums1, start1, mid, nums2, start2, end2, k);
            }
        } else { // error: arrays are not sorted or passed invalid indices
            throw new IllegalArgumentException("Invalid input");
        }
    }

    private int mergeSort(int[] nums1, int start1, int end1, int[] nums2, int start2, int end2) {
        if (end1 - start1 <= 0 && end2 - start2 <= 0) { // base case: both arrays are empty or contain one element each
            return rangeClosed(start1, end1).mapToInt(i -> nums1[i]).sum() > rangeClosed(start2, end2).mapToInt(j -> nums2[j]).sum() ? nums1[start1] : nums2[start2];
        }
        
        int mid1 = start1 + (end1 - start1) / 2; // middle index of nums1
        int mid2 = mid1 + (end2 - mid1); // middle index of nums2
        
        int left1 = mergeSort(nums1, start1, mid1, nums2, start2, mid2);
        int right1 = mergeSort(nums1, mid1 + 1, end1, nums2, mid2 + 1, end2);
        
        return left1 < right1 ? left1 : right1;
    }

    private int[] rangeToIntArray(int[] nums, int start, int end) {
        int[] result = new int[end - start + 1];
        System.arraycopy(nums, start, result, 0, result.length);
        return result;
    }
}
