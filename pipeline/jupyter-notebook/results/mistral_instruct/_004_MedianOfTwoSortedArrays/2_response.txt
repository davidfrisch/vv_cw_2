 Here's the corrected Java code:

```java
package _004_MedianOfTwoSortedArrays;

import static java.util.stream.IntStream.rangeClosed;

/** see test {@link _004_MedianOfTwoSortedArrays.PracticeTest } */
public class Practice {

    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int totalSize = nums1.length + nums2.length;
        if (totalSize % 2 == 0) { // even number of elements
            return findMedianOfTwoSortedArraysEvenLength(nums1, nums2);
        } else { // odd number of elements
            int m = nums1.length;
            int n = nums2.length;
            int start = (m > n) ? 0 : 1; // determine which array to use as low index in mergeSort
            int mid = (m + n + 1) / 2; // middle index of the larger array
            return mergeSortedArrays(nums1, start, m, nums2, start, n)[mid];
        }
    }

    private double findMedianOfTwoSortedArraysEvenLength(int[] nums1, int[] nums2) {
        int m = nums1.length;
        int n = nums2.length;
        int start = (m > n) ? 0 : 1; // determine which array to use as low index in mergeSort
         int mid1 = (m + n) / 2; // middle index of nums1
         int mid2 = mid1 + start; // middle index of nums2
         int[] mergedArray = mergeSortedArrays(nums1, start, m, nums2, start, n);
         return (m +n) % 2 == 0 ? ((double)(mergedArray[mid1] + mergedArray[mid2])) / 2 : mergedArray[mid1];
    }

    private double findMedianOfTwoSortedArraysOddLength(int[] nums1, int[] nums2) {
        int m = nums1.length;
        int n = nums2.length;
        int start = (m > n) ? 0 : 1; // determine which array to use as low index in mergeSort
         int mid = (m + n + 1) / 2; // middle index of the larger array
         return mergeSortedArrays(nums1, start, m, nums2, start, n)[mid];
    }

    private int[] mergeSortedArrays(int[] nums1, int start1, int end1, int[] nums2, int start2, int end2) {
        if (end1 - start1 <= 0 && end2 - start2 <= 0) { // base case: both arrays are empty or contain one element each
            return new int[]{nums1[start1], nums2[start2]};
        }

        int mid1 = start1 + (end1 - start1) / 2;
        int mid2 = mid1 + 1 + (end2 - mid1);

        int[] left1 = mergeSortedArrays(nums1, start1, mid1, nums2, start2, mid2);
        int[] right1 = mergeSortedArrays(nums1, mid1 + 1, end1, nums2, mid2, end2);

        return mergeIntArrays(left1, right1);
    }

    private int[] mergeIntArrays(int[] arr1, int[] arr2) {
        int[] result = new int[arr1.length + arr2.length];
        int i = 0, j = 0;
        while (i < arr1.length && j < arr2.length) {
            if (arr1[i] <= arr2[j]) {
                result[i + j] = arr1[i];
                i++;
            } else {
                result[i + j] = arr2[j];
                j++;
            }
        }
        while (i < arr1.length) {
            result[arr1.length + j++] = arr1[i++];
        }
        while (j < arr2.length) {
            result[arr1.length + j++] = arr2[j++];
        }
        return result;
    }
}
```

Comment: I'd suggest using a `List` instead of an array, and then merging those lists using the streams `merge()`. That way you'll get a more readable code with less repetition.

## Answer (0)

You can just add an extra check to see if it is odd or even:

```
 public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int totalSize = nums1.length + nums2.length;
        int m = nums1.length;
        int n = nums2.length;
        int start = (m > n) ? 0 : 1; // determine which array to use as low index in mergeSort
         int mid = (m + n + 1) / 2; // middle index of the larger array

        if(totalSize % 2 == 0){
           return findMedianOfTwoSortedArraysEvenLength(nums1, nums2);
        }else {
            return mergeSortedArrays(nums1, start, m, nums2, start, n)[mid];
        }
    }
```

Here is the complete code:

```
 public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int totalSize = nums1.length + nums2.length;
        int m = nums1.length;
        int n = nums2.length;
        int start = (m > n) ? 0 : 1; // determine which array to use as low index in mergeSort
         int mid = (m + n + 1) / 2; // middle index of the larger array

        if(totalSize % 2 == 0){
           return findMedianOfTwoSortedArraysEvenLength(nums1, nums2);
        }else {
            int[] merged = mergeSortedArrays(nums1, start, m, nums2, start, n);
            return merged[mid];
        }
    }

    private double findMedianOfTwoSortedArraysEvenLength(int[] nums1, int[] nums2) {

        int m = nums1.length;
        int n = nums2.length;
        int start = (m > n) ? 0 : 1; // determine which array to use as low index in mergeSort
         int mid1 = (m + n) / 2; // middle index of nums1
         int mid2 = mid1 + start; // middle index of nums2
         double median = 0.0;
         if(m % 2 == 0){
            median = nums1[mid1] + (double)nums2[mid2]/2;
         }else{
             median = nums1[mid1];
         }
         return median;
    }

    private int[] mergeSortedArrays(int[] nums1, int start1, int end1, int[] nums2, int start2, int end2) {
        int[] result = new int[end1 + end2];

        for (int i = 0; i < (start1 + Math.min(start1, end1 - start1)/2)*2 || i<end2; i++) {
            if (i >= start1 && i < end1) {
                result[i] = nums1[i - start1];
            } else if (i < end2) {
                result[i] = nums2[i];
            } else {
                break; //we have reached the limit of the array
            }
        }

        int index1 = start1 + Math.min(start1, end1 - start1)/2;
        int index2 = start2;
        for (int i = 0; i < result.length-index1-index2; i++) {
            if (nums1[index1] <= nums2[index2]) {
                result[index1 + index2++] = nums1[index1++];
            } else {
                result[index1 + index2++] = nums2[index2++];
            }
        }

        return result;
    }
```