{"is_extracted": false, "number_of_code_blocks": 3, "extra_information_num_words": null, "response": " Here's the corrected Java code:\n\n```java\npackage _004_MedianOfTwoSortedArrays;\n\nimport static java.util.stream.IntStream.rangeClosed;\n\n/** see test {@link _004_MedianOfTwoSortedArrays.PracticeTest } */\npublic class Practice {\n\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n        int totalSize = nums1.length + nums2.length;\n        if (totalSize % 2 == 0) { // even number of elements\n            return findMedianOfTwoSortedArraysEvenLength(nums1, nums2);\n        } else { // odd number of elements\n            int m = nums1.length;\n            int n = nums2.length;\n            int start = (m > n) ? 0 : 1; // determine which array to use as low index in mergeSort\n            int mid = (m + n + 1) / 2; // middle index of the larger array\n            return mergeSortedArrays(nums1, start, m, nums2, start, n)[mid];\n        }\n    }\n\n    private double findMedianOfTwoSortedArraysEvenLength(int[] nums1, int[] nums2) {\n        int m = nums1.length;\n        int n = nums2.length;\n        int start = (m > n) ? 0 : 1; // determine which array to use as low index in mergeSort\n         int mid1 = (m + n) / 2; // middle index of nums1\n         int mid2 = mid1 + start; // middle index of nums2\n         int[] mergedArray = mergeSortedArrays(nums1, start, m, nums2, start, n);\n         return (m +n) % 2 == 0 ? ((double)(mergedArray[mid1] + mergedArray[mid2])) / 2 : mergedArray[mid1];\n    }\n\n    private double findMedianOfTwoSortedArraysOddLength(int[] nums1, int[] nums2) {\n        int m = nums1.length;\n        int n = nums2.length;\n        int start = (m > n) ? 0 : 1; // determine which array to use as low index in mergeSort\n         int mid = (m + n + 1) / 2; // middle index of the larger array\n         return mergeSortedArrays(nums1, start, m, nums2, start, n)[mid];\n    }\n\n    private int[] mergeSortedArrays(int[] nums1, int start1, int end1, int[] nums2, int start2, int end2) {\n        if (end1 - start1 <= 0 && end2 - start2 <= 0) { // base case: both arrays are empty or contain one element each\n            return new int[]{nums1[start1], nums2[start2]};\n        }\n\n        int mid1 = start1 + (end1 - start1) / 2;\n        int mid2 = mid1 + 1 + (end2 - mid1);\n\n        int[] left1 = mergeSortedArrays(nums1, start1, mid1, nums2, start2, mid2);\n        int[] right1 = mergeSortedArrays(nums1, mid1 + 1, end1, nums2, mid2, end2);\n\n        return mergeIntArrays(left1, right1);\n    }\n\n    private int[] mergeIntArrays(int[] arr1, int[] arr2) {\n        int[] result = new int[arr1.length + arr2.length];\n        int i = 0, j = 0;\n        while (i < arr1.length && j < arr2.length) {\n            if (arr1[i] <= arr2[j]) {\n                result[i + j] = arr1[i];\n                i++;\n            } else {\n                result[i + j] = arr2[j];\n                j++;\n            }\n        }\n        while (i < arr1.length) {\n            result[arr1.length + j++] = arr1[i++];\n        }\n        while (j < arr2.length) {\n            result[arr1.length + j++] = arr2[j++];\n        }\n        return result;\n    }\n}\n```\n\nComment: I'd suggest using a `List` instead of an array, and then merging those lists using the streams `merge()`. That way you'll get a more readable code with less repetition.\n\n## Answer (0)\n\nYou can just add an extra check to see if it is odd or even:\n\n```\n public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n        int totalSize = nums1.length + nums2.length;\n        int m = nums1.length;\n        int n = nums2.length;\n        int start = (m > n) ? 0 : 1; // determine which array to use as low index in mergeSort\n         int mid = (m + n + 1) / 2; // middle index of the larger array\n\n        if(totalSize % 2 == 0){\n           return findMedianOfTwoSortedArraysEvenLength(nums1, nums2);\n        }else {\n            return mergeSortedArrays(nums1, start, m, nums2, start, n)[mid];\n        }\n    }\n```\n\nHere is the complete code:\n\n```\n public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n        int totalSize = nums1.length + nums2.length;\n        int m = nums1.length;\n        int n = nums2.length;\n        int start = (m > n) ? 0 : 1; // determine which array to use as low index in mergeSort\n         int mid = (m + n + 1) / 2; // middle index of the larger array\n\n        if(totalSize % 2 == 0){\n           return findMedianOfTwoSortedArraysEvenLength(nums1, nums2);\n        }else {\n            int[] merged = mergeSortedArrays(nums1, start, m, nums2, start, n);\n            return merged[mid];\n        }\n    }\n\n    private double findMedianOfTwoSortedArraysEvenLength(int[] nums1, int[] nums2) {\n\n        int m = nums1.length;\n        int n = nums2.length;\n        int start = (m > n) ? 0 : 1; // determine which array to use as low index in mergeSort\n         int mid1 = (m + n) / 2; // middle index of nums1\n         int mid2 = mid1 + start; // middle index of nums2\n         double median = 0.0;\n         if(m % 2 == 0){\n            median = nums1[mid1] + (double)nums2[mid2]/2;\n         }else{\n             median = nums1[mid1];\n         }\n         return median;\n    }\n\n    private int[] mergeSortedArrays(int[] nums1, int start1, int end1, int[] nums2, int start2, int end2) {\n        int[] result = new int[end1 + end2];\n\n        for (int i = 0; i < (start1 + Math.min(start1, end1 - start1)/2)*2 || i<end2; i++) {\n            if (i >= start1 && i < end1) {\n                result[i] = nums1[i - start1];\n            } else if (i < end2) {\n                result[i] = nums2[i];\n            } else {\n                break; //we have reached the limit of the array\n            }\n        }\n\n        int index1 = start1 + Math.min(start1, end1 - start1)/2;\n        int index2 = start2;\n        for (int i = 0; i < result.length-index1-index2; i++) {\n            if (nums1[index1] <= nums2[index2]) {\n                result[index1 + index2++] = nums1[index1++];\n            } else {\n                result[index1 + index2++] = nums2[index2++];\n            }\n        }\n\n        return result;\n    }\n```"}