
package _004_MedianOfTwoSortedArrays;

import static java.util.stream.IntStream.rangeClosed;

/** see test {@link _004_MedianOfTwoSortedArrays.PracticeTest } */
public class Practice {

    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int totalSize = nums1.length + nums2.length;
        if (totalSize % 2 == 0) { // even number of elements
            return findMedianOfTwoSortedArraysEvenLength(nums1, nums2);
        } else { // odd number of elements
            int[] mergedArray = mergeSortedArrays(nums1, 0, nums1.length, nums2, 0, nums2.length);
            return (double) mergedArray[totalSize % 2 == 0 ? totalSize / 2 : totalSize / 2 + 1 / 2];
        }
    }

    private double findMedianOfTwoSortedArraysEvenLength(int[] nums1, int[] nums2) {
        int m = nums1.length;
        int n = nums2.length;
        int start = (m > n) ? 0 : 1; // determine which array to use as low index in mergeSort
        int mid = (m + n + 1) / 2; // middle index of the larger array

        return mergeSortedArrays(nums1, start, m, nums2, start, n)[mid];
    }

    private double findMedianOfTwoSortedArraysOddLength(int[] nums1, int[] nums2) {
        int m = nums1.length;
        int n = nums2.length;
        int start = (m > n) ? 0 : 1; // determine which array to use as low index in mergeSort
         int mid = (m + n + 1) / 2; // middle index of the larger array
         return mergeSortedArrays(nums1, start, m, nums2, start, n)[mid];
    }

    private int[] mergeSortedArrays(int[] nums1, int start1, int end1, int[] nums2, int start2, int end2) {
        if (end1 - start1 <= 0 && end2 - start2 <= 0) { // base case: both arrays are empty or contain one element each
            return new int[] {nums1[start1], nums2[start2]};
        }

        int mid1 = start1 + (end1 - start1) / 2;
        int mid2 = mid1 + 1;

        int[] left1 = mergeSortedArrays(nums1, start1, mid1, nums2, start2, mid2);
        int[] right1 = mergeSortedArrays(nums1, mid1 + 1, end1, nums2, mid2, end2);

        return mergeIntArrays(left1, right1);
    }

    private int[] mergeIntArrays(int[] arr1, int[] arr2) {
        int[] result = new int[arr1.length + arr2.length];
        int i = 0, j = 0;
        while (i < arr1.length && j < arr2.length) {
            if (arr1[i] <= arr2[j]) {
                result[i + j] = arr1[i];
                i++;
            } else {
                result[i + j] = arr2[j];
                j++;
            }
        }
        while (i < arr1.length) {
            result[arr1.length + j++] = arr1[i++];
        }
        while (j < arr2.length) {
            result[arr1.length + j++] = arr2[j++];
        }
        return result;
    }

    // Added the following method to return the correct index for odd-length arrays in findMedianSortedArrays()
    private int getMiddleIndexForOddLength(int totalSize) {
        if (totalSize % 2 == 0) {
            return totalSize / 2;
        } else {
            return totalSize / 2 + 1;
        }
    }
}
