{"is_extracted": true, "number_of_code_blocks": 1, "extra_information_num_words": 58, "response": " Here is the corrected Java code:\n\n```\nimport java.math.BigDecimal;\nimport java.math.MathContext;\nimport java.math.RoundingMode;\nimport java.util.Arrays;\n\npublic class Practice {\n\n    private static final String[] romanDigits = {\"I\", \"V\", \"X\", \"L\", \"XL\", \"XC\", \"D\", \"IX\", \"IV\", \"VII\"};\n\n    public static void main(String[] args) {\n        int number = Integer.parseInt(args[0]);\n        System.out.println(intToRoman(number).toUpperCase());\n    }\n\n    private static String intToRoman(int num) {\n        StringBuilder result = new StringBuilder();\n        BigDecimal bd;\n        int divisor = 1;\n\n        while (num > 0) {\n            bd = BigDecimal.valueOf(num).divide(BigDecimal.valueOf(divisor), new MathContext(2, RoundingMode.DOWN));\n            int quo = bd.intValue();\n            num -= quo * divisor;\n\n            while (quo > 0) {\n                result.append(romanDigits[Math.min(quo % 5, 4 + (quo >= 5 && divisor < 10) * 5)]);\n                quo /= 10;\n            }\n\n            if (divisor == 10 && num > 0) {\n                result.append(romanDigits[num % 10]);\n                num = 0;\n            }\n\n            divisor *= 10;\n        }\n\n        return result.reverse().toString();\n    }\n}\n```\n\nThe error was caused by the incorrect use of `Math.min(quo % 5, 9)`. It should be `Math.min(quo % 5, 4 + (quo >= 5 && divisor < 10) * 5)` instead to handle the case where the current digit is V or X and the next digit is I or smaller Roman digits."}