
private static String intToRoman(int num) {
    StringBuilder result = new StringBuilder();
    BigDecimal bd;
    int divisor = 1;
     int thousands = num / 1000;
     num %= 1000;

    if (thousands > 0) {
        result.append(repeat(3, romanDigits[thousands])); // Replace this line
        num += thousands * 1000;
        thousands = 0;
    }

    while (num > 0) {
        bd = BigDecimal.valueOf(num).divide(BigDecimal.valueOf(divisor), new MathContext(2, RoundingMode.DOWN));
        int quo = bd.intValue();
        num -= quo * divisor;

        if (quo > 0) {
            while (quo > 0) {
                result.append(romanDigits[Math.min(9, quo % 10)]); // Change this line
                quo /= 10;
            }
        }

        if (divisor == 100) {
            if (num > 0) {
                result.append(romanDigits[num % 10]); // Change this condition
                num = 0;
            }
        }

        divisor *= 10;
    }

    return result.reverse().toString();
}

private static String repeat(int count, String str) {
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < count; i++) {
        sb.append(str);
    }
    return sb.toString();
}
