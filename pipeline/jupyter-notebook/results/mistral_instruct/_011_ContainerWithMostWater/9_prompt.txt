The following code has the following error: 
clean:
   [delete] Deleting directory /app/leetcode-master/bin
   [delete] Deleting directory /app/leetcode-master/report

init:
    [mkdir] Created dir: /app/leetcode-master/bin
    [mkdir] Created dir: /app/leetcode-master/report

compile.specific:
    Compiling 13 source files to /app/leetcode-master/bin
    /app/leetcode-master/src/_011_ContainerWithMostWater/Practice.java:16: error: ')' expected
                int newMaxArea = Math.min(height[left], currentDifference) < height[left] ? (newMaxArea = height[left] * currentDifference, newMaxArea) : newMaxArea;
                                                                                                                                          ^
    /app/leetcode-master/src/_011_ContainerWithMostWater/Practice.java:16: error: ';' expected
                int newMaxArea = Math.min(height[left], currentDifference) < height[left] ? (newMaxArea = height[left] * currentDifference, newMaxArea) : newMaxArea;
                                                                                                                                                      ^
    /app/leetcode-master/src/_011_ContainerWithMostWater/Practice.java:16: error: not a statement
                int newMaxArea = Math.min(height[left], currentDifference) < height[left] ? (newMaxArea = height[left] * currentDifference, newMaxArea) : newMaxArea;
                                                                                                                                                          ^
    3 errors
. Retry with a fix of the complete file. Don't explain! Only give the java code

public class Practice {

    public int maxArea(int[] height) {
        int left = 0, right = height.length - 1;
        int maxArea = Math.min(height[left], height[right]) * (right - left);

        while (left < right) {
            if (height[left] > height[right]) {
                int temp = left;
                left = right;
                right = temp;
            }

            int currentDifference = right - left;
            int newMaxArea = Math.min(height[left], currentDifference) < height[left] ? (newMaxArea = height[left] * currentDifference, newMaxArea) : newMaxArea;

            maxArea = Math.max(newMaxArea, maxArea);
            left++;
        }

        return maxArea;
    }
}
