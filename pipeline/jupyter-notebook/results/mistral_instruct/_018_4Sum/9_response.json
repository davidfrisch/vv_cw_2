{"is_extracted": true, "number_of_code_blocks": 1, "extra_information_num_words": 144, "response": " Here is the Java code for the given function `fourSum`:\n\n```\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.TreeMap;\n\npublic class Practice {\n\n    public List<List<Integer>> fourSum(int[] nums, int target) {\n        Arrays.sort(nums);\n        \n        Map<Integer, Integer[]> map = new TreeMap<>(); // Store the indices of each number and its previous index in the given array instead of creating a new list for quadruplets\n\n        List<List<Integer>> result = new ArrayList<>();\n        for (int i = 0; i < nums.length; i++) {\n            int remainingSum = target - nums[i];\n            \n            if (map.containsKey(remainingSum)) {\n                Integer[] pair = map.get(remainingSum); // Get the indices of the two numbers that sum up to 'remainingSum'\n                int j = i + 1;\n                int k = nums.length - 1;\n\n                while (j < k) {\n                    if (nums[i] + nums[j] + nums[k] == target) {\n                        result.add(Arrays.asList(nums[i], nums[j], nums[k], nums[k--]));\n                        j++; // Move the index 'j' to the next number to avoid duplicate quadruplets\n                    } else if (nums[j] + nums[k] < remainingSum) {\n                        j++; // Move the index 'j' to the next number as the current pair of numbers does not sum up to 'target'\n                    } else {\n                        k--; // Move the index 'k' to the previous number as we have checked all possible combinations from 'j' to 'nums.length - 1'\n                    }\n                }\n            } else {\n                for (int j = i + 1; j < nums.length; j++) {\n                    int sum = remainingSum - (nums[j] - nums[i]);\n\n                    if (map.containsKey(sum)) {\n                        List<Integer> list = map.get(sum); // Get the indices of the two numbers that sum up to 'sum'\n                        int kIndex = Arrays.binarySearch(nums, target - nums[i] - nums[j]); // Find the index of the number that sums up with 'remainingSum - (nums[i] + nums[j])'\n\n                        if (kIndex >= 0) {\n                            result.add(Arrays.asList(nums[i], nums[j], nums[kIndex], nums[kIndex--]));\n\n                            map.put(nums[j], new Integer[]{i, j}); // Store the indices of the second number and update its previous index if needed to avoid duplicates in the map\n                            map.put(nums[kIndex], new Integer[]{j, kIndex}); // Store the indices of the third number and update its previous index to 'j' or initialize it if not exists\n                        }\n                    } else {\n                        map.putIfAbsent(nums[j], new Integer[]{i, j}); // Store the indices of the second number and initialize its previous index to 'i' or update it if already exists\n\n                        int[] tempNums = Arrays.copyOfRange(nums, i + 1, nums.length);\n                        int tempIndex = Arrays.binarySearch(tempNums, target - (nums[i] + nums[j])); // Find the index of the number that sums up with 'remainingSum - (nums[i] + nums[j])' in the copied array\n                        if (tempIndex >= 0) { // Note: we need to make a copy of the array 'nums' from index 'i+1' to the end to avoid modifying the original array during the search\n                            result.add(Arrays.asList(nums[i], nums[j], nums[tempIndex], tempNums[tempIndex]));\n\n                            map.put(nums[j], new Integer[]{i, j}); // Store the indices of the second number and update its previous index if needed to avoid duplicates in the map\n                            map.put(nums[tempIndex], new Integer[]{j, tempIndex}); // Store the indices of the third number and update its previous index to 'j' or initialize it if not exists\n                        }\n                    }\n                }\n            }\n\n            map.put(nums[i], new Integer[]{i, i}); // Update the map with the current number's index and its previous index\n        }\n\n        return result;\n    }\n}\n```\n\nThis function implements a solution for finding all possible combinations of four unique integers from an array that add up to a given target value. It uses a `Map<Integer, Integer[]>` data structure to store the indices of numbers that have already been encountered and their previous index in the iteration to avoid duplicate solutions. The function iterates through the input array twice, each time using two pointers to find pairs of numbers that sum up to the remaining difference from the target value. If such a pair is found, it is extended with two more numbers that sum up to the target value to form a quadruplet, which is added to the result list. The function returns the result list containing all unique combinations of four integers that add up to the given target value."}