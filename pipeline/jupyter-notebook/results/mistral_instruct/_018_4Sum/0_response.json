{"is_extracted": true, "number_of_code_blocks": 1, "extra_information_num_words": 99, "response": " Here's the complete file with the solution for the given problem:\n\n```\npackage _018_4Sum;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.TreeMap;\n\n/**\n * Description: \n * Given an array S of n integers, are there elements a, b, c, and d in S \n * such that a + b + c + d = target? Find all unique quadruplets in the \n * array which gives the sum of target. \n * \n * Note: \n * Elements in a quadruplet (a,b,c,d) must be in non-descending order. \n * (ie, a <= b <= c <= d) \n * The solution set must not contain duplicate quadruplets. \n * For example, given array S = {1 0 -1 0 -2 2}, and target = 0. \n * A solution set is: (-1,  0, 0, 1) (-2, -1, 1, 2) (-2,  0, 0, 2)\n * \n * @tag : Array; Hash Table; Two Pointers;\n * {@link https://leetcode.com/problems/4sum/ }\n */\npublic class Practice {\n\n    public List<List<Integer>> fourSum(int[] nums, int target) {\n        Arrays.sort(nums);\n        Map<Integer, Integer> map = new TreeMap<>();\n        for (int i = 0; i < nums.length; i++) {\n            int remainingSum = target - nums[i];\n            if (map.containsKey(remainingSum)) {\n                List<List<Integer>> quadruplets = new ArrayList<>();\n                for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n                    int j = i + 1;\n                    int k = nums.length - 1;\n                    while (j < k) {\n                        if (nums[j] + nums[k] == remainingSum) {\n                            quadruplets.add(Arrays.asList(nums[i], nums[j], nums[k], nums[i + 1]));\n                            j++;\n                            k--;\n                        } else if (nums[j] + nums[k] < remainingSum) {\n                            j++;\n                        } else {\n                            k--;\n                        }\n                    }\n                }\n                map.put(nums[i], quadruplets);\n            } else {\n                map.put(nums[i], new ArrayList<>());\n            }\n        }\n        return map.getOrDefault(target - nums[nums.length - 1], Collections.emptyList()).stream().flatMap(Collection::stream).collect(Collectors.toList());\n    }\n}\n```\n\nThis solution involves sorting the input array, then iterating through each element in the sorted array and using two pointers (one starting from the next index and another at the end of the array) to find the remaining sum needed for a valid quadruplet. For each pair of indices found, we add the current number as the first element of the quadruplet, then look for the remaining two numbers that sum up to the remaining sum. The unique quadruplets are added to a map and returned at the end."}