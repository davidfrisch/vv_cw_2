
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.stream.Collectors;

public class Practice {

    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        Map<Integer, Integer> map = new TreeMap<>();
         // Store the indices of each number in the given array instead of creating a new list for quadruplets
        List<List<Integer>> result = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            int remainingSum = target - nums[i];
            if (map.containsKey(remainingSum)) {
                for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
                    int j = i + 1;
                    int k = nums.length - 1;
                    while (j < k) {
                        if (nums[i] + nums[j] + nums[k] + nums[k - 1] == target) {
                            result.add(Arrays.asList(nums[i], nums[j], nums[k], nums[k--]));
                            j++;
                        } else if (nums[j] + nums[k] < remainingSum) {
                            j++;
                        } else {
                            k--;
                        }
                    }
                }
                map.put(nums[i], i); // Store the index of the current number in the map instead of creating a new ArrayList
            } else {
                for (int j = i + 1; j < nums.length; j++) {
                    int sum = remainingSum - (nums[j] - nums[i]);
                    if (map.containsKey(sum)) {
                        List<Integer> list = map.get(sum);
                        for (int kIndex : list) {
                            int k = nums.length - 1; // Assuming the index of the third number is the last index in the array
                            while (k > kIndex) {
                                if (nums[j] + nums[k] == target) {
                                    result.add(Arrays.asList(nums[i], nums[j], nums[k], nums[k--]));
                                    break;
                                } else if (nums[k] < sum - nums[j]) {
                                    k--;
                                } else {
                                    break; // No need to check further as we have found a quadruplet
                                }
                            }
                        }
                    }
                    map.put(nums[j], j); // Store the index of the second number in the map instead of creating a new ArrayList
                }
                map.put(nums[i], i); // Update the map with the current number's index again to avoid duplicates if the inner loop doesn't find any quadruplet
            }
        }
        return result;
    }
}
