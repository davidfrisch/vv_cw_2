
package _018_4Sum;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

/**
 * Description: 
 * Given an array S of n integers, are there elements a, b, c, and d in S 
 * such that a + b + c + d = target? Find all unique quadruplets in the 
 * array which gives the sum of target. 
 * 
 * Note: 
 * Elements in a quadruplet (a,b,c,d) must be in non-descending order. 
 * (ie, a <= b <= c <= d) 
 * The solution set must not contain duplicate quadruplets. 
 * For example, given array S = {1 0 -1 0 -2 2}, and target = 0. 
 * A solution set is: (-1,  0, 0, 1) (-2, -1, 1, 2) (-2,  0, 0, 2)
 * 
 * @tag : Array; Hash Table; Two Pointers;
 * {@link https://leetcode.com/problems/4sum/ }
 */
public class Practice {

    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        Map<Integer, Integer> map = new TreeMap<>();
        for (int i = 0; i < nums.length; i++) {
            int remainingSum = target - nums[i];
            if (map.containsKey(remainingSum)) {
                List<List<Integer>> quadruplets = new ArrayList<>();
                for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
                    int j = i + 1;
                    int k = nums.length - 1;
                    while (j < k) {
                        if (nums[j] + nums[k] == remainingSum) {
                            quadruplets.add(Arrays.asList(nums[i], nums[j], nums[k], nums[i + 1]));
                            j++;
                            k--;
                        } else if (nums[j] + nums[k] < remainingSum) {
                            j++;
                        } else {
                            k--;
                        }
                    }
                }
                map.put(nums[i], quadruplets);
            } else {
                map.put(nums[i], new ArrayList<>());
            }
        }
        return map.getOrDefault(target - nums[nums.length - 1], Collections.emptyList()).stream().flatMap(Collection::stream).collect(Collectors.toList());
    }
}
