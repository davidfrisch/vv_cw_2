
/**
 * Description: 
 * Given a linked list, remove the nth node from the end of list and return its head. 
 * 
 * For example, 
 * Given linked list: 1->2->3->4->5, and n = 2. 
 * After removing the second node from the end, the linked list 
 * becomes 1->2->3->5. 
 * 
 * Note: 
 * Given n will always be valid. Try to do this in one pass.
 * 
 *************************************************************************
 * @tag : Linked List; Two Pointers
 * {@link https://leetcode.com/problems/remove-nth-node-from-end-of-list/ }
 */
package _019_RemoveNthNodeFromEndOfList;

import com.leetcode.ListNode;

/** see test {@link _019_RemoveNthNodeFromEndOfList.PracticeTest } */
public class Practice {

    public ListNode removeNthFromEnd(ListNode head, int n) {
        if (head == null || head.next == null) return head; // Check for edge cases

        ListNode first = head;
        ListNode second = null;

        for (int i = 0; i < n && first != null; i++) first = first.next; // Move 'first' pointer 'n' steps ahead

        if (first == null) throw new RuntimeException("The list has less than n nodes");

        second = head;
        while (first.next != null) {
            first = first.next;
            second = second.next;
        }

        second.next = second.next.next; // Remove the nth node from the end of the list by changing the next pointer of the second last node to point to the next of the last node

        return head;
    }

}
