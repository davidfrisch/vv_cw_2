The following code has the following error: 


Message: junit.framework.AssertionFailedError
@Test
    public void Test5() {
        int n = 1;
        int[] nums = {1};
        ListNode head = ListNode.constructLinkedList(nums);
        ListNode actual = solution.removeNthFromEnd(head, n);
        int[] exps = {};
        ListNode expect = ListNode.constructLinkedList(exps);
        assertTrue(ListNode.isSameList(actual, expect));
    }


. Retry with a fix of the complete file. Don't explain! Only give the java code

/**
 * Description: 
 * Given a linked list, remove the nth node from the end of list and return its head. 
 * 
 * For example, 
 * Given linked list: 1->2->3->4->5, and n = 2. 
 * After removing the second node from the end, the linked list 
 * becomes 1->2->3->5. 
 * 
 * Note: 
 * Given n will always be valid. Try to do this in one pass.
 * 
 *************************************************************************
 * @tag : Linked List; Two Pointers
 * {@link https://leetcode.com/problems/remove-nth-node-from-end-of-list/ }
 */
package _019_RemoveNthNodeFromEndOfList;

import com.leetcode.ListNode;

/** see test {@link _019_RemoveNthNodeFromEndOfList.PracticeTest } */
public class Practice {

    public ListNode removeNthFromEnd(ListNode head, int n) {
        if (head == null || head.next == null) return head; // Check for edge cases

        ListNode fast = head, slow = head;
        for (int i = 0; i < n; i++) {
            if (fast != null) fast = fast.next; // Move 'fast' n steps ahead
            else throw new RuntimeException("The list has less than n nodes");
        }

        while (fast.next != null) { // Move both pointers 'slow' and 'fast' until 'fast' points to the last node to be removed
            slow = slow.next;
            fast = fast.next;
        }
        slow.next = slow.next.next; // Remove the nth node from the end of the list by changing the next pointer of the second last node to point to the next of the last node

        return head;
    }

}
