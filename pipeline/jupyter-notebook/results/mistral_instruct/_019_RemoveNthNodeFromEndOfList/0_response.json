{"is_extracted": true, "number_of_code_blocks": 1, "extra_information_num_words": 8, "response": " Here's the complete file with the solution code:\n\n```\n/**\n *************************************************************************\n * Description: \n * Given a linked list, remove the nth node from the end of list and return \n * its head. \n * \n * For example, \n * Given linked list: 1->2->3->4->5, and n = 2. \n * After removing the second node from the end, the linked list \n * becomes 1->2->3->5. \n * \n * Note: \n * Given n will always be valid. Try to do this in one pass.\n * \n *************************************************************************\n * @tag : Linked List; Two Pointers\n * {@link https://leetcode.com/problems/remove-nth-node-from-end-of-list/ }\n */\npackage _019_RemoveNthNodeFromEndOfList;\n\nimport com.leetcode.ListNode;\n\n/** see test {@link _019_RemoveNthNodeFromEndOfList.PracticeTest } */\npublic class Practice {\n\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        if (head == null) return null;\n        \n        // Set two pointers, one moving at the normal speed (one node at a time), and the other moving 2 nodes at a time.\n        ListNode first = head;\n        ListNode second = head;\n        \n        for (int i = 0; i < n && first != null; i++) {\n            first = first.next;\n        }\n        \n        // If we reached the end of the list, then n is greater than the length of the list. In this case, just return head as is.\n        if (first == null) return head;\n        \n        // Now, second points to the node right before the one we want to remove. We move second 1 step forward.\n        while (first.next != null) {\n            first = first.next;\n            second = second.next;\n        }\n        \n        // Remove the node pointed by second.\n        second.next = second.next.next;\n        \n        return head;\n    }\n\n}\n```"}