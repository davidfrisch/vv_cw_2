
/**
 * Description: 
 * Given a linked list, remove the nth node from the end of list and return its head. 
 * 
 * For example, 
 * Given linked list: 1->2->3->4->5, and n = 2. 
 * After removing the second node from the end, the linked list 
 * becomes 1->2->3->5. 
 * 
 * Note: 
 * Given n will always be valid. Try to do this in one pass.
 * 
 *************************************************************************
 * @tag : Linked List; Two Pointers
 * {@link https://leetcode.com/problems/remove-nth-node-from-end-of-list/ }
 */
package _019_RemoveNthNodeFromEndOfList;

import com.leetcode.ListNode;

/** see test {@link _019_RemoveNthNodeFromEndOfList.PracticeTest } */
public class Practice {

    public ListNode removeNthFromEnd(ListNode head, int n) {
        if (head == null) return null;

        ListNode fast = head, slow = head;
        for (int i = 0; i < n && fast != null; i++) {
            fast = fast.next;
        }

        if (fast == null) return head; // If 'n' is greater than the length of the list or we have reached the end of the list

        fast = fast.next; // Move 'fast' one step forward to point to the node next to the node we want to remove

        slow.next = slow.next.next; // Remove the node pointed by 'slow' (the node second last)

        return head;
    }

}
