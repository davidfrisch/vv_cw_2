/**
 ***************************************************************************
 * Description:
 * 
 * Given a string, find the length of the longest substring without repeating 
 * characters. For example, the longest substring without repeating letters 
 * for "abcabcbb" is "abc", which the length is 3. For "bbbbb" the longest 
 * substring is "b", with the length of 1.
 * 
 ***************************************************************************
 * @tag : Hash Table; Two Pointers; String
 * {@link https://leetcode.com/problems/longest-substring-without-repeating-characters/ }
 */
package _003_LongestSubstringWithoutRepeatingCharacters;

/** see test {@link _003_LongestSubstringWithoutRepeatingCharacters.PracticeTest } */
public class Practice {

    public int lengthOfLongestSubstring(String a) {
        int n = a.length();
        int result = 0;
        int[] index = new int[128]; // Assuming ASCII character set

        for (int j = 0, i = 0; j < n; j++) {
            i = Math.max(index[a.charAt(j)], i);
            result = Math.max(result, j - i + 1);
            index[a.charAt(j)] = j + 1;
        }

        return result;
    }

}
