{"is_extracted": false, "number_of_code_blocks": 0, "extra_information_num_words": null, "response": "/**\n ***************************************************************************\n * Description:\n * \n * Given a string, find the length of the longest substring without repeating \n * characters. For example, the longest substring without repeating letters \n * for \"abcabcbb\" is \"abc\", which the length is 3. For \"bbbbb\" the longest \n * substring is \"b\", with the length of 1.\n * \n ***************************************************************************\n * @tag : Hash Table; Two Pointers; String\n * {@link https://leetcode.com/problems/longest-substring-without-repeating-characters/ }\n */\npackage _003_LongestSubstringWithoutRepeatingCharacters;\n\n/** see test {@link _003_LongestSubstringWithoutRepeatingCharacters.PracticeTest } */\npublic class Practice {\n\n    public int lengthOfLongestSubstring(String a) {\n        int n = a.length();\n        int result = 0;\n        int[] index = new int[128]; // Assuming ASCII character set\n\n        for (int j = 0, i = 0; j < n; j++) {\n            i = Math.max(index[a.charAt(j)], i);\n            result = Math.max(result, j - i + 1);\n            index[a.charAt(j)] = j + 1;\n        }\n\n        return result;\n    }\n\n}\n"}