{"is_extracted": true, "number_of_code_blocks": 1, "extra_information_num_words": 1, "response": "```\n/**\n ***************************************************************************\n * Description:\n * Given an array of integers, find two numbers such that they add up to \n * a specific target number. \n * The function twoSum should return indices of the two numbers such that \n * they add up to the target, where index1 must be less than index2. \n * Please note that your returned answers (both index1 and index2) are not \n * zero-based. \n * \n * You may assume that each input would have exactly one solution. \n * Input: numbers={2, 7, 11, 15}, target=9 \n * Output: index1=1, index2=2\n * \n ***************************************************************************\n * @tag : Array; Hash Table\n * {@link https://leetcode.com/problems/two-sum/ }\n */\npackage _001_TwoSum;\n\n/** see test {@link _001_TwoSum.PracticeTest } */\nimport java.util.HashMap;\n\npublic class Practice {\n\n  public int[] twoSum(int[] nums, int target) {\n      HashMap<Integer, Integer> map = new HashMap<>();\n      for (int i = 0; i < nums.length; i++) {\n          int complement = target - nums[i];\n          if (map.containsKey(complement)) {\n              return new int[] { map.get(complement), i + 1 };\n          }\n          map.put(nums[i], i + 1);\n      }\n      throw new IllegalArgumentException(\"No two sum solution\");\n  }\n\n}\n```  "}