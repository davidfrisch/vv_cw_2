{"is_extracted": false, "number_of_code_blocks": 0, "extra_information_num_words": null, "response": "/**\n *******************************************************************************\n * Description: \n * \n * You are given two linked lists representing two non-negative numbers. \n * The digits are stored in reverse order and each of their nodes contain \n * a single digit. Add the two numbers and return it as a linked list. \n * Input: (2 -> 4 -> 3) + (5 -> 6 -> 4) \n * Output: 7 -> 0 -> 8\n * \n *******************************************************************************\n * @tag : Linked List; Math\n * {@link https://leetcode.com/problems/add-two-numbers/ }\n */\npackage _002_AddTwoNumbers;\n\nimport com.leetcode.ListNode;\n\n/** see test {@link _002_AddTwoNumbers.PracticeTest } */\npublic class Practice {\n\n    public ListNode addTwoNumbers(ListNode a, ListNode b) {\n        ListNode dummy = new ListNode(0);\n        ListNode current = dummy;\n        int carry = 0;\n\n        while (a != null || b != null) {\n            int x = (a != null) ? a.val : 0;\n            int y = (b != null) ? b.val : 0;\n            int sum = carry + x + y;\n            carry = sum / 10;\n            current.next = new ListNode(sum % 10);\n            current = current.next;\n            if (a != null) a = a.next;\n            if (b != null) b = b.next;\n        }\n\n        if (carry > 0) {\n            current.next = new ListNode(carry);\n        }\n\n        return dummy.next;\n    }\n\n}\n"}