The following code has the following error: Message: junit.framework.AssertionFailedError
@Test
    public void Test1() {
        int[] nums1 = { 2, 4, 3 };
        int[] nums2 = { 5, 6, 4 };
        ListNode a = ListNode.constructLinkedList(nums1);
        ListNode b = ListNode.constructLinkedList(nums2);
        ListNode actual = solution.addTwoNumbers(a, b);
        int[] exps = { 7, 0, 8 };
        ListNode expected = ListNode.constructLinkedList(exps);
        assertTrue(ListNode.isSameList(actual, expected));
    }

Message: junit.framework.AssertionFailedError
@Test
    public void Test2() {
        int[] nums1 = { 2 };
        int[] nums2 = { 9, 9, 4 };
        ListNode a = ListNode.constructLinkedList(nums1);
        ListNode b = ListNode.constructLinkedList(nums2);
        ListNode actual = solution.addTwoNumbers(a, b);
        int[] exps = { 1, 0, 5 };
        ListNode expected = ListNode.constructLinkedList(exps);
        assertTrue(ListNode.isSameList(actual, expected));
    }

Message: junit.framework.AssertionFailedError
@Test
    public void Test3() {
        int[] nums1 = { 2 };
        int[] nums2 = { 8 };
        ListNode a = ListNode.constructLinkedList(nums1);
        ListNode b = ListNode.constructLinkedList(nums2);
        ListNode actual = solution.addTwoNumbers(a, b);
        int[] exps = { 0, 1 };
        ListNode expected = ListNode.constructLinkedList(exps);
        assertTrue(ListNode.isSameList(actual, expected));
    }

Message: junit.framework.AssertionFailedError
@Test
    public void Test4() {
        int[] nums1 = { 9, 9, 4 };
        int[] nums2 = { 3 };
        ListNode a = ListNode.constructLinkedList(nums1);
        ListNode b = ListNode.constructLinkedList(nums2);
        ListNode actual = solution.addTwoNumbers(a, b);
        int[] exps = { 2, 0, 5 };
        ListNode expected = ListNode.constructLinkedList(exps);
        assertTrue(ListNode.isSameList(actual, expected));
    }

Message: junit.framework.AssertionFailedError
@Test
    public void Test5() {
        int[] nums1 = { 0 };
        int[] nums2 = { 0, 2 };
        ListNode a = ListNode.constructLinkedList(nums1);
        ListNode b = ListNode.constructLinkedList(nums2);
        ListNode actual = solution.addTwoNumbers(a, b);
        int[] exps = { 0, 2 };
        ListNode expected = ListNode.constructLinkedList(exps);
        assertTrue(ListNode.isSameList(actual, expected));
    }


. Retry with a fix of the complete file. Don't explain! Only give the java code

/**
 *******************************************************************************
 * Description: 
 * 
 * You are given two linked lists representing two non-negative numbers. 
 * The digits are stored in reverse order and each of their nodes contain 
 * a single digit. Add the two numbers and return it as a linked list. 
 * Input: (2 -> 4 -> 3) + (5 -> 6 -> 4) 
 * Output: 7 -> 0 -> 8
 * 
 *******************************************************************************
 * @tag : Linked List; Math
 * {@link https://leetcode.com/problems/add-two-numbers/ }
 */
package _002_AddTwoNumbers;

import com.leetcode.ListNode;

/** see test {@link _002_AddTwoNumbers.PracticeTest } */
public class Practice {

    public ListNode addTwoNumbers(ListNode a, ListNode b) {
        // TODO Auto-generated method stub
        return null;
    }

}
