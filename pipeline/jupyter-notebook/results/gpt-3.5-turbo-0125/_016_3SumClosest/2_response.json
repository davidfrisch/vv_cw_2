{"is_extracted": true, "number_of_code_blocks": 1, "extra_information_num_words": 1, "response": "```\nimport java.util.Arrays;\n\n/**\n *************************************************************************\n * Description: \n * \n * Given an array S of n integers, find three integers in S such that the \n * sum is closest to a given number, target. Return the sum of the three \n * integers. You may assume that each input would have exactly one solution. \n * \n * For example, given array S = {-1 2 1 -4}, and target = 1. \n * The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n * \n *************************************************************************\n * @tag : Array; Two Pointers\n * {@link https://leetcode.com/problems/3sum-closest/ }\n */\npackage _016_3SumClosest;\n\nimport java.util.Arrays;\n\n/** see test {@link _016_3SumClosest.PracticeTest } */\npublic class Practice {\n\n    public int threeSumClosest(int[] nums, int target) {\n        Arrays.sort(nums);\n        int closestSum = nums[0] + nums[1] + nums[2];\n        for (int i = 0; i < nums.length - 2; i++) {\n            int left = i + 1;\n            int right = nums.length - 1;\n            while (left < right) {\n                int currentSum = nums[i] + nums[left] + nums[right];\n                if (Math.abs(currentSum - target) < Math.abs(closestSum - target)) {\n                    closestSum = currentSum;\n                }\n                if (currentSum < target) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        return closestSum;\n    }\n\n}\n```"}