{"is_extracted": true, "number_of_code_blocks": 1, "extra_information_num_words": 1, "response": "```\n/**\n *******************************************************************************\n * Description: \n * \n * Implement regular expression matching with support for '.' and '*'. \n * '.' Matches any single character. \n * '*' Matches zero or more of the preceding element. \n * The matching should cover the entire input string (not partial). \n * \n * The function prototype should be: \n * \n * bool isMatch(const char *s, const char *p) \n * \n * Some examples: \n * \n * isMatch(\"aa\",\"a\") \u2192 false \n * isMatch(\"aa\",\"aa\") \u2192 true \n * isMatch(\"aaa\",\"aa\") \u2192 false \n * isMatch(\"aa\", \"a*\") \u2192 true \n * isMatch(\"aa\", \".*\") \u2192 true \n * isMatch(\"ab\", \".*\") \u2192 true \n * isMatch(\"aab\", \"c*a*b\") \u2192 true\n * \n *******************************************************************************\n * @tag : Dynamic Programming; Backtracking; String\n * {@link https://leetcode.com/problems/regular-expression-matching/ }\n */\npackage _010_RegularExpressionMatching;\n\n/** see test {@link _010_RegularExpressionMatching.PracticeTest } */\npublic class Practice {\n\n    public boolean isMatch(String s, String p) {\n        // Your solution code here\n        return false;\n    }\n\n    public boolean isMatch(String s, String p) {\n        if (p.isEmpty()) {\n            return s.isEmpty();\n        }\n\n        boolean firstMatch = !s.isEmpty() && (p.charAt(0) == s.charAt(0) || p.charAt(0) == '.');\n\n        if (p.length() >= 2 && p.charAt(1) == '*') {\n            return (isMatch(s, p.substring(2)) || (firstMatch && isMatch(s.substring(1), p)));\n        } else {\n            return firstMatch && isMatch(s.substring(1), p.substring(1));\n        }\n    }\n}\n```"}