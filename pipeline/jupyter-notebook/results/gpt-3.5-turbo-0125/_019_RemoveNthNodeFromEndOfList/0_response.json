{"is_extracted": false, "number_of_code_blocks": 0, "extra_information_num_words": null, "response": "/** \n *************************************************************************\n * Description: \n * \n * Given a linked list, remove the nth node from the end of list and return \n * its head. \n * \n * For example, \n * Given linked list: 1->2->3->4->5, and n = 2. \n * After removing the second node from the end, the linked list \n * becomes 1->2->3->5. \n * \n * Note: \n * Given n will always be valid. Try to do this in one pass.\n * \n *************************************************************************\n * @tag : Linked List; Two Pointers\n * {@link https://leetcode.com/problems/remove-nth-node-from-end-of-list/ }\n */\npackage _019_RemoveNthNodeFromEndOfList;\n\nimport com.leetcode.ListNode;\n\n/** see test {@link _019_RemoveNthNodeFromEndOfList.PracticeTest } */\npublic class Practice {\n\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        ListNode dummy = new ListNode(0);\n        dummy.next = head;\n        ListNode fast = dummy;\n        ListNode slow = dummy;\n\n        for (int i = 0; i <= n; i++) {\n            fast = fast.next;\n        }\n\n        while (fast != null) {\n            fast = fast.next;\n            slow = slow.next;\n        }\n\n        slow.next = slow.next.next;\n\n        return dummy.next;\n    }\n\n}\n"}