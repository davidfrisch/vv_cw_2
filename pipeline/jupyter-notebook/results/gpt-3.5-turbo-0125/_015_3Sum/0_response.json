{"is_extracted": true, "number_of_code_blocks": 1, "extra_information_num_words": 1, "response": "```\n/**\n ***************************************************************************\n * Description:\n * \n * Given an array S of n integers, are there elements a, b, c in S such that \n * a + b + c = 0? Find all unique triplets in the array which gives the sum \n * of zero. \n * \n * Note: \n * Elements in a triplet (a,b,c) must be in non-descending order. (ie, a \u2264 b \u2264 c) \n * The solution set must not contain duplicate triplets. \n * For example, given array S = {-1 0 1 2 -1 -4}, \n * A solution set is: (-1, 0, 1) (-1, -1, 2)\n * \n ***************************************************************************\n * @tag : Array; Two Pointers;\n * {@link https://leetcode.com/problems/3sum/ }\n */\npackage _015_3Sum;\n\nimport java.util.List;\n\n/** see test {@link _015_3Sum.PracticeTest } */\npublic class Practice {\n\n    public List<List<Integer>> threeSum(int[] nums) {\n        // Solution code here\n        return null;\n    }\n\n}\n```"}