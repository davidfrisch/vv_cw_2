{"is_extracted": true, "number_of_code_blocks": 1, "extra_information_num_words": 1, "response": "```\n/**\n *************************************************************************\n * Description: \n * \n * Given a digit string, return all possible letter combinations that the \n * number could represent. \n * A mapping of digit to letters (just like on the telephone buttons) \n * is given below.\n * \n * Input:Digit string \"23\" \n * Output: [\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"]. \n * \n * Note: \n * Although the above answer is in lexicographical order, your answer \n * could be in any order you want.\n * \n *************************************************************************\n * @tag : Backtracking; String\n * {@link https://leetcode.com/problems/letter-combinations-of-a-phone-number/ }\n */\npackage _017_LetterCombinationsOfAPhoneNumber;\n\nimport java.util.List;\n\n/** see test {@link _017_LetterCombinationsOfAPhoneNumber.PracticeTest } */\npublic class Practice {\n\n    public List<String> letterCombinations(String digits) {\n        // TODO Auto-generated method stub\n        return null;\n    }\n\n}\n```"}