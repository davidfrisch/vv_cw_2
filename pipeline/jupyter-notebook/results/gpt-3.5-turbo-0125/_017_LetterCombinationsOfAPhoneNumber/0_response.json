{"is_extracted": false, "number_of_code_blocks": 0, "extra_information_num_words": null, "response": "/**\n *************************************************************************\n * Description: \n * \n * Given a digit string, return all possible letter combinations that the \n * number could represent. \n * A mapping of digit to letters (just like on the telephone buttons) \n * is given below.\n * \n * Input:Digit string \"23\" \n * Output: [\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"]. \n * \n * Note: \n * Although the above answer is in lexicographical order, your answer \n * could be in any order you want.\n * \n *************************************************************************\n * @tag : Backtracking; String\n * {@link https://leetcode.com/problems/letter-combinations-of-a-phone-number/ }\n */\npackage _017_LetterCombinationsOfAPhoneNumber;\n\nimport java.util.List;\n\n/** see test {@link _017_LetterCombinationsOfAPhoneNumber.PracticeTest } */\npublic class Practice {\n\n    public List<String> letterCombinations(String digits) {\n        List<String> result = new ArrayList<>();\n        if (digits == null || digits.length() == 0) {\n            return result;\n        }\n        Map<Character, String> map = new HashMap<>();\n        map.put('2', \"abc\");\n        map.put('3', \"def\");\n        map.put('4', \"ghi\");\n        map.put('5', \"jkl\");\n        map.put('6', \"mno\");\n        map.put('7', \"pqrs\");\n        map.put('8', \"tuv\");\n        map.put('9', \"wxyz\");\n        backtrack(result, map, digits, \"\", 0);\n        return result;\n    }\n\n    private void backtrack(List<String> result, Map<Character, String> map, String digits, String combination, int index) {\n        if (index == digits.length()) {\n            result.add(combination);\n            return;\n        }\n        char digit = digits.charAt(index);\n        String letters = map.get(digit);\n        for (int i = 0; i < letters.length(); i++) {\n            backtrack(result, map, digits, combination + letters.charAt(i), index + 1);\n        }\n    }\n\n}\n"}