
/**
 ***************************************************************************
 * Description:
 * 
 * There are two sorted arrays nums1 and nums2 of size m and n respectively. 
 * Find the median of the two sorted arrays. The overall run time complexity 
 * should be O(log (m+n)). 
 * 
 ***************************************************************************
 * @tag : Divide and Conquer; Array; Binary Search
 * {@link https://leetcode.com/problems/median-of-two-sorted-arrays/ }
 */
package _004_MedianOfTwoSortedArrays;

/** see test {@link _004_MedianOfTwoSortedArrays.PracticeTest } */
public class Practice {

    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        // Add your solution code here
        int m = nums1.length;
        int n = nums2.length;
        
        // Base case handling if one array is empty
        if (m == 0 && n == 1) {
            return nums2[0];
        } else if (m == 1 && n == 0) {
            return nums1[0];
        }
        
        // Merge the two arrays and find the median
        int[] merged = new int[m + n];
        int i = 0, j = 0, k = 0;
        
        while (i < m && j < n) {
            if (nums1[i] <= nums2[j]) {
                merged[k++] = nums1[i++];
            } else {
                merged[k++] = nums2[j++];
            }
        }
        
        while (i < m) {
            merged[k++] = nums1[i++];
        }
        
        while (j < n) {
            merged[k++] = nums2[j++];
        }
        
        if ((m + n) % 2 == 0) {
            return (merged[(m + n) / 2 - 1] + merged[(m + n) / 2]) / 2.0;
        } else {
            return merged[(m + n) / 2];
        }
    }

}
